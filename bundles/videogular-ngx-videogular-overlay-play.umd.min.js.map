{"version":3,"sources":["../overlay-play/src/lib/vg-overlay-play.component.ts","../overlay-play/src/lib/overlay-play.module.ts"],"names":["VgOverlayPlayComponent","ref","API","fsAPI","controlsHidden","this","vgSkipOnControlsHidden","vgSkipOnControlsHiddenDelay","areControlsHiddenChangeTime","isNativeFullscreen","areControlsHidden","subscriptions","isBuffering","elem","nativeElement","prototype","ngOnInit","_this","isPlayerReady","onPlayerReady","push","playerReadyEvent","subscribe","target","getMediaById","vgFor","onChangeFullscreen","bind","isHidden","onHideControls","bufferDetected","onUpdateBuffer","fsState","nativeFullscreen","hidden","Date","now","onClick","getState","VgStates","VG_PLAYING","pause","VG_PAUSED","VG_ENDED","play","state","Array","i","l","length","ngOnDestroy","forEach","s","unsubscribe","Component","args","selector","encapsulation","ViewEncapsulation","None","template","ElementRef","VgApiService","VgFullscreenApiService","VgControlsHiddenService","Input","HostBinding","HostListener","NgModule","imports","CommonModule","VgCoreModule","declarations","exports"],"mappings":"opBAyFE,SAAAA,EACEC,EACOC,EACAC,EACCC,GAFDC,KAAAH,IAAAA,EACAG,KAAAF,MAAAA,EACCE,KAAAD,eAAAA,EAlBDC,KAAAC,wBAAyB,EACzBD,KAAAE,4BAA8B,GAIvCF,KAAAG,4BAAsC,EAEtCH,KAAAI,oBAAqB,EACrBJ,KAAAK,mBAAoB,EAEpBL,KAAAM,cAAgC,GAEGN,KAAAO,aAAc,EAQ/CP,KAAKQ,KAAOZ,EAAIa,qBAGlBd,EAAAe,UAAAC,SAAA,WAAA,IAAAC,EAAAZ,KACMA,KAAKH,IAAIgB,cACXb,KAAKc,gBAELd,KAAKM,cAAcS,KACjBf,KAAKH,IAAImB,iBAAiBC,WAAS,WAAO,OAAAL,EAAKE,qBAKrDnB,EAAAe,UAAAI,cAAA,WAAA,IAAAF,EAAAZ,KACEA,KAAKkB,OAASlB,KAAKH,IAAIsB,aAAanB,KAAKoB,OACzCpB,KAAKM,cAAcS,KACjBf,KAAKF,MAAMuB,mBAAmBJ,UAC5BjB,KAAKqB,mBAAmBC,KAAKtB,QAGjCA,KAAKM,cAAcS,KACjBf,KAAKD,eAAewB,SAASN,UAAUjB,KAAKwB,eAAeF,KAAKtB,QAElEA,KAAKM,cAAcS,KACjBf,KAAKkB,OAAOZ,cAAcmB,eAAeR,WAAS,SAAEV,GAClD,OAAAK,EAAKc,eAAenB,QAK1BZ,EAAAe,UAAAgB,eAAA,SAAenB,GACbP,KAAKO,YAAcA,GAGrBZ,EAAAe,UAAAW,mBAAA,SAAmBM,GACb3B,KAAKF,MAAM8B,mBACb5B,KAAKI,mBAAqBuB,IAI9BhC,EAAAe,UAAAc,eAAA,SAAeK,GACT7B,KAAKC,wBAA0BD,KAAKK,mBAAqBwB,IAC3D7B,KAAKG,4BAA8B2B,KAAKC,OAE1C/B,KAAKK,kBAAoBwB,GAK3BlC,EAAAe,UAAAsB,QAAA,WACE,IAAIhC,KAAKC,0BAA2BD,KAAKK,mBAAsByB,KAAKC,MAAQ/B,KAAKG,4BAAkE,IAAnCH,KAAKE,6BAMrH,OAFcF,KAAKiC,YAGjB,KAAKC,EAAAA,SAASC,WACZnC,KAAKkB,OAAOkB,QACZ,MAEF,KAAKF,EAAAA,SAASG,UACd,KAAKH,EAAAA,SAASI,SACZtC,KAAKkB,OAAOqB,SAKlB5C,EAAAe,UAAAuB,SAAA,eACMO,EAAQN,EAAAA,SAASG,UAErB,GAAIrC,KAAKkB,OACP,GAAIlB,KAAKkB,OAAOsB,iBAAiBC,OAC/B,IAAK,IAAIC,EAAI,EAAGC,EAAI3C,KAAKkB,OAAOsB,MAAMI,OAAQF,EAAIC,EAAGD,IACnD,GAAI1C,KAAKkB,OAAOsB,MAAME,KAAOR,EAAAA,SAASC,WAAY,CAChDK,EAAQN,EAAAA,SAASC,WACjB,YAIJK,EAAQxC,KAAKkB,OAAOsB,MAIxB,OAAOA,GAGT7C,EAAAe,UAAAmC,YAAA,WACE7C,KAAKM,cAAcwC,SAAO,SAAEC,GAAM,OAAAA,EAAEC,2CA1KvCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,kBACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,SAAU,4RAWR,yrCAvBFC,EAAAA,kBAOOC,EAAAA,oBAAcC,EAAAA,8BAAwBC,EAAAA,0DA+D5CC,EAAAA,sCACAA,EAAAA,2CACAA,EAAAA,2BAWAC,EAAAA,YAAWX,KAAA,CAAC,uCAwDZY,EAAAA,aAAYZ,KAAA,CAAC,kBCrIhB,iCALCa,EAAAA,SAAQb,KAAA,CAAC,CACRc,QAAS,CAACC,EAAAA,aAAcC,EAAAA,cACxBC,aAAc,CAACxE,GACfyE,QAAS,CAACzE","sourcesContent":["import {\n  Component,\n  OnInit,\n  Input,\n  ElementRef,\n  HostListener,\n  ViewEncapsulation,\n  OnDestroy,\n  HostBinding,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { VgApiService, VgFullscreenApiService, VgControlsHiddenService, VgStates } from '@videogular/ngx-videogular/core';\n\n@Component({\n  selector: 'vg-overlay-play',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div\n    class=\"vg-overlay-play\"\n    [class.native-fullscreen]=\"isNativeFullscreen\"\n    [class.controls-hidden]=\"areControlsHidden\"\n  >\n    <div\n      class=\"overlay-play-container\"\n      [class.vg-icon-play_arrow]=\"getState() !== 'playing'\"\n    ></div>\n  </div>`,\n  styles: [\n    `\n      vg-overlay-play {\n        z-index: 200;\n      }\n      vg-overlay-play.is-buffering {\n        display: none;\n      }\n      vg-overlay-play .vg-overlay-play {\n        transition: all 0.5s;\n        cursor: pointer;\n        position: absolute;\n        display: block;\n        color: white;\n        width: 100%;\n        height: 100%;\n        font-size: 80px;\n        filter: alpha(opacity=60);\n        opacity: 0.6;\n      }\n      vg-overlay-play .vg-overlay-play.native-fullscreen.controls-hidden {\n        cursor: none;\n      }\n      vg-overlay-play\n        .vg-overlay-play\n        .overlay-play-container.vg-icon-play_arrow {\n        pointer-events: none;\n        width: 100%;\n        height: 100%;\n        position: absolute;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 80px;\n      }\n      vg-overlay-play .vg-overlay-play:hover {\n        filter: alpha(opacity=100);\n        opacity: 1;\n      }\n      vg-overlay-play\n        .vg-overlay-play:hover\n        .overlay-play-container.vg-icon-play_arrow:before {\n        transform: scale(1.2);\n      }\n    `,\n  ],\n})\nexport class VgOverlayPlayComponent implements OnInit, OnDestroy {\n  @Input() vgFor: string;\n  @Input() vgSkipOnControlsHidden = false;\n  @Input() vgSkipOnControlsHiddenDelay = 0.5;\n  elem: HTMLElement;\n  target: any;\n\n  areControlsHiddenChangeTime: number = 0;\n\n  isNativeFullscreen = false;\n  areControlsHidden = false;\n\n  subscriptions: Subscription[] = [];\n\n  @HostBinding('class.is-buffering') isBuffering = false;\n\n  constructor(\n    ref: ElementRef,\n    public API: VgApiService,\n    public fsAPI: VgFullscreenApiService,\n    private controlsHidden: VgControlsHiddenService\n  ) {\n    this.elem = ref.nativeElement;\n  }\n\n  ngOnInit() {\n    if (this.API.isPlayerReady) {\n      this.onPlayerReady();\n    } else {\n      this.subscriptions.push(\n        this.API.playerReadyEvent.subscribe(() => this.onPlayerReady())\n      );\n    }\n  }\n\n  onPlayerReady() {\n    this.target = this.API.getMediaById(this.vgFor);\n    this.subscriptions.push(\n      this.fsAPI.onChangeFullscreen.subscribe(\n        this.onChangeFullscreen.bind(this)\n      )\n    );\n    this.subscriptions.push(\n      this.controlsHidden.isHidden.subscribe(this.onHideControls.bind(this))\n    );\n    this.subscriptions.push(\n      this.target.subscriptions.bufferDetected.subscribe((isBuffering) =>\n        this.onUpdateBuffer(isBuffering)\n      )\n    );\n  }\n\n  onUpdateBuffer(isBuffering) {\n    this.isBuffering = isBuffering;\n  }\n\n  onChangeFullscreen(fsState: boolean) {\n    if (this.fsAPI.nativeFullscreen) {\n      this.isNativeFullscreen = fsState;\n    }\n  }\n\n  onHideControls(hidden: boolean) {\n    if (this.vgSkipOnControlsHidden && this.areControlsHidden != hidden) {\n      this.areControlsHiddenChangeTime = Date.now();\n    }\n    this.areControlsHidden = hidden;\n\n  }\n\n  @HostListener('click')\n  onClick() {\n    if (this.vgSkipOnControlsHidden && (this.areControlsHidden || (Date.now() - this.areControlsHiddenChangeTime) < this.vgSkipOnControlsHiddenDelay * 1000)) {\n      return;\n    }\n\n    const state = this.getState();\n\n    switch (state) {\n      case VgStates.VG_PLAYING:\n        this.target.pause();\n        break;\n\n      case VgStates.VG_PAUSED:\n      case VgStates.VG_ENDED:\n        this.target.play();\n        break;\n    }\n  }\n\n  getState() {\n    let state = VgStates.VG_PAUSED;\n\n    if (this.target) {\n      if (this.target.state instanceof Array) {\n        for (let i = 0, l = this.target.state.length; i < l; i++) {\n          if (this.target.state[i] === VgStates.VG_PLAYING) {\n            state = VgStates.VG_PLAYING;\n            break;\n          }\n        }\n      } else {\n        state = this.target.state;\n      }\n    }\n\n    return state;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VgOverlayPlayComponent } from './vg-overlay-play.component';\nimport { VgCoreModule } from '@videogular/ngx-videogular/core';\n\n@NgModule({\n  imports: [CommonModule, VgCoreModule],\n  declarations: [VgOverlayPlayComponent],\n  exports: [VgOverlayPlayComponent],\n})\nexport class VgOverlayPlayModule {}\n"]}